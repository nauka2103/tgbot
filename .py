import telebot  # –†–∞–±–æ—Ç–∞ —Å Telegram-–±–æ—Ç–æ–º
import requests  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã
from telebot import types
import os
from dotenv import load_dotenv  # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from apscheduler.schedulers.background import BackgroundScheduler  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
from datetime import datetime  # –†–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º

load_dotenv()
API = os.getenv('API')
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_units = {}
user_languages = {}
daily_subscriptions = {}
daily_subscription_setup = {}

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
translations = {
    "ru": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ. \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        "weather": "üå¶ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:",
        "temperature": "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}",
        "feels_like": "üå¨ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}",
        "humidity": "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%",
        "wind_speed": "üå™ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å",
        "weather_condition": "üå§ {weather}",
        "unit_changed": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {unit}. \n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.",
        "language_changed": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language}. \n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.",
        "choose_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        "choose_unit": "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:",
        "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "city_not_found": "üö´ –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
        "enter_subscription_city": "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:",
        "enter_subscription_time": "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç):",
        "subscription_set": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –≤ {time}."
    },
    "en": {
        "welcome": "Welcome! I can help you with weather information. \n\nChoose an option below:",
        "weather": "üå¶ Weather in {city}:",
        "temperature": "üå° Temperature: {temp}",
        "feels_like": "üå¨ Feels like: {feels_like}",
        "humidity": "üíß Humidity: {humidity}%",
        "wind_speed": "üå™ Wind speed: {wind} m/s",
        "weather_condition": "üå§ {weather}",
        "unit_changed": "Temperature unit set to {unit}. \n\nNow choose a city.",
        "language_changed": "Language changed to {language}. \n\nNow choose a city.",
        "choose_city": "Choose a city:",
        "choose_unit": "Choose a temperature unit:",
        "choose_language": "Choose a language:",
        "city_not_found": "üö´ City not found!",
        "enter_subscription_city": "Enter the city for the daily weather summary:",
        "enter_subscription_time": "Enter the delivery time in HH:MM format (24-hour):",
        "subscription_set": "Daily weather summary set for {city} at {time}."
    },
    "kk": {
        "welcome": "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! –ú–µ–Ω —Å—ñ–∑–¥—ñ“£ “õ–∞–ª–∞“£—ã–∑–¥—ã“£ –∞—É–∞ —Ä–∞–π—ã —Ç—É—Ä–∞–ª—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä –±–µ—Ä—É “Ø—à—ñ–Ω –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω. \n\n–¢”©–º–µ–Ω–¥–µ –±—ñ—Ä–µ—É—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "weather": "üå¶ “ö–∞–ª–∞–¥–∞“ì—ã –∞—É–∞ —Ä–∞–π—ã {city}:",
        "temperature": "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}",
        "feels_like": "üå¨ “ö–∞–ª–∞–π —Å–µ–∑—ñ–ª–µ–¥—ñ: {feels_like}",
        "humidity": "üíß –´–ª“ì–∞–ª–¥—ã–ª—ã“õ: {humidity}%",
        "wind_speed": "üå™ –ñ–µ–ª–¥—ñ“£ –∂—ã–ª–¥–∞–º–¥—ã“ì—ã: {wind} –º/—Å",
        "weather_condition": "üå§ {weather}",
        "unit_changed": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–Ω—ã“£ ”©–ª—à–µ–º –±—ñ—Ä–ª—ñ–≥—ñ {unit} –µ—Ç—ñ–ø ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ. \n\n–ï–Ω–¥—ñ “õ–∞–ª–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑.",
        "language_changed": "–¢—ñ–ª {language} –¥–µ–ø ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ. \n\n–ï–Ω–¥—ñ “õ–∞–ª–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑.",
        "choose_city": "“ö–∞–ª–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        "choose_unit": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞–Ω—ã“£ ”©–ª—à–µ–º –±—ñ—Ä–ª—ñ–≥—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "choose_language": "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        "city_not_found": "üö´ “ö–∞–ª–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã!",
        "enter_subscription_city": "–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –∞—É–∞ —Ä–∞–π—ã —Å–≤–æ–¥–∫–∞—Å—ã “Ø—à—ñ–Ω “õ–∞–ª–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "enter_subscription_time": "–ñ—ñ–±–µ—Ä—É —É–∞“õ—ã—Ç—ã–Ω –ß–ß:–ú–ú (24 —Å–∞“ì–∞—Ç—Ç—ã“õ —Ñ–æ—Ä–º–∞—Ç) —Ç“Ø—Ä—ñ–Ω–¥–µ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "subscription_set": "–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å–≤–æ–¥–∫–∞ {city} “õ–∞–ª–∞—Å—ã “Ø—à—ñ–Ω {time} —É–∞“õ—ã—Ç—ã–Ω–¥–∞ –æ—Ä–Ω–∞—Ç—ã–ª–¥—ã."
    }
}

# –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
weather_translations = {
    "clear sky": "–ê—à—ã“õ –∞—Å–ø–∞–Ω",
    "few clouds": "–ê–∑–¥–∞“ì–∞–Ω –±“±–ª—Ç—Ç–∞—Ä",
    "scattered clouds": "–¢–∞—Ä–∞–ª“ì–∞–Ω –±“±–ª—Ç—Ç–∞—Ä",
    "broken clouds": "–ñ–∞—Ä—Ç—ã–ª–∞–π –±“±–ª—Ç—Ç—ã",
    "shower rain": "–ñ–∞“£–±—ã—Ä –∂–∞—É—É—ã",
    "rain": "–ñ–∞“£–±—ã—Ä",
    "thunderstorm": "–ñ—ã–ª“ì–∞–ª—ã“õ",
    "snow": "“ö–∞—Ä",
    "mist": "–¢“±–º–∞–Ω"
}

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
def send_daily_weather(chat_id, city):
    language = user_languages.get(chat_id, 'ru')
    unit = user_units.get(chat_id, '¬∞C')
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if unit == '¬∞C':
        unit_param = 'metric'
    elif unit == '¬∞F':
        unit_param = 'imperial'
    else:
        unit_param = 'standard'

    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units={unit_param}&lang={language}'
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        main_data = data['main']
        temp = main_data['temp']
        feels_like = main_data['feels_like']
        humidity = main_data['humidity']
        wind = data['wind']['speed']
        weather = data['weather'][0]['description']

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π
        if language == 'kk':
            weather = weather_translations.get(weather, weather)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if unit == '¬∞C':
            temp_str = f'{temp}¬∞C'
            feels_like_str = f'{feels_like}¬∞C'
        elif unit == '¬∞F':
            temp_str = f'{temp}¬∞F'
            feels_like_str = f'{feels_like}¬∞F'
        else:
            temp_str = f'{temp} K'
            feels_like_str = f'{feels_like} K'

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_message = (
            f"{translations[language]['weather'].format(city=city)}\n"
            f"üå° {translations[language]['temperature'].format(temp=temp_str)}\n"
            f"üå¨ {translations[language]['feels_like'].format(feels_like=feels_like_str)}\n"
            f"üíß {translations[language]['humidity'].format(humidity=humidity)}\n"
            f"üå™ {translations[language]['wind_speed'].format(wind=wind)}\n"
            f"üå§ {translations[language]['weather_condition'].format(weather=weather)}"
        )
        bot.send_message(chat_id, response_message)
    else:
        bot.send_message(chat_id, translations[language]["city_not_found"])

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
def check_daily_weather():
    now = datetime.now().strftime("%H:%M")
    for chat_id, sub in daily_subscriptions.items():
        if sub['time'] == now:
            send_daily_weather(chat_id, sub['city'])

scheduler = BackgroundScheduler()
scheduler.add_job(check_daily_weather, 'interval', minutes=1)
scheduler.start()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def main(message):
    user_lang = user_languages.get(message.chat.id, 'ru')
    bot.send_message(message.chat.id, translations[user_lang]["welcome"])
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row(types.KeyboardButton('–ê—Å—Ç–∞–Ω–∞'))
    markup.row(types.KeyboardButton('–ê–ª–º–∞—Ç—ã'), types.KeyboardButton('–ö–∞—Ä–∞–≥–∞–Ω–¥–∞'))
    bot.send_message(message.chat.id, translations[user_lang]["choose_city"], reply_markup=markup)

# –°–º–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
@bot.message_handler(commands=['unit'])
def set_unit(message):
    user_lang = user_languages.get(message.chat.id, 'ru')
    unit_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    unit_markup.row(types.KeyboardButton('¬∞C'), types.KeyboardButton('¬∞F'), types.KeyboardButton('K'))
    bot.send_message(message.chat.id, translations[user_lang]["choose_unit"], reply_markup=unit_markup)

# –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
@bot.message_handler(commands=['language'])
def set_language(message):
    user_lang = user_languages.get(message.chat.id, 'ru')
    lang_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    lang_markup.row(types.KeyboardButton('–†—É—Å—Å–∫–∏–π'), types.KeyboardButton('English'), types.KeyboardButton('“ö–∞–∑–∞“õ—à–∞'))
    bot.send_message(message.chat.id, translations[user_lang]["choose_language"], reply_markup=lang_markup)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
@bot.message_handler(commands=['daily'])
def set_daily(message):
    chat_id = message.chat.id
    daily_subscription_setup[chat_id] = {"step": "city"}
    user_lang = user_languages.get(chat_id, 'ru')
    bot.send_message(chat_id, translations[user_lang]["enter_subscription_city"])

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–∞–ø—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(func=lambda message: message.chat.id in daily_subscription_setup)
def daily_setup_handler(message):
    chat_id = message.chat.id
    user_lang = user_languages.get(chat_id, 'ru')
    setup = daily_subscription_setup.get(chat_id)

    if setup["step"] == "city":
        setup["city"] = message.text
        setup["step"] = "time"
        bot.send_message(chat_id, translations[user_lang]["enter_subscription_time"])
    elif setup["step"] == "time":
        time_text = message.text.strip()
        try:
            datetime.strptime(time_text, "%H:%M")
            daily_subscriptions[chat_id] = {"city": setup["city"], "time": time_text}
            bot.send_message(chat_id, translations[user_lang]["subscription_set"].format(city=setup["city"], time=time_text))
            del daily_subscription_setup[chat_id]
        except ValueError:
            bot.send_message(chat_id, translations[user_lang]["enter_subscription_time"])

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
@bot.message_handler(content_types=['text'])
def get_weather(message):
    chat_id = message.chat.id
    user_lang = user_languages.get(chat_id, 'ru')

    city = message.text
    unit = user_units.get(chat_id, '¬∞C')
    if unit == '¬∞C':
        unit_param = 'metric'
    elif unit == '¬∞F':
        unit_param = 'imperial'
    else:
        unit_param = 'standard'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–∑—ã–∫
    if city in ['–†—É—Å—Å–∫–∏–π', 'English', '“ö–∞–∑–∞“õ—à–∞']:
        user_languages[chat_id] = 'ru' if city == '–†—É—Å—Å–∫–∏–π' else 'en' if city == 'English' else 'kk'
        bot.send_message(chat_id, translations[user_lang]["language_changed"].format(language=city))
        return

    # –ò–ª–∏ –Ω–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if city in ['¬∞C', '¬∞F', 'K']:
        user_units[chat_id] = city
        bot.send_message(chat_id, translations[user_lang]["unit_changed"].format(unit=city))
        return

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units={unit_param}&lang={user_lang}'
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        main_data = data['main']
        temp = main_data['temp']
        feels_like = main_data['feels_like']
        humidity = main_data['humidity']
        wind = data['wind']['speed']
        weather_desc = data['weather'][0]['description']

        if user_lang == 'kk':
            weather_desc = weather_translations.get(weather_desc, weather_desc)

        if unit == '¬∞C':
            temp_str = f'{temp}¬∞C'
            feels_like_str = f'{feels_like}¬∞C'
        elif unit == '¬∞F':
            temp_str = f'{temp}¬∞F'
            feels_like_str = f'{feels_like}¬∞F'
        else:
            temp_str = f'{temp} K'
            feels_like_str = f'{feels_like} K'

        response_message = (
            f"{translations[user_lang]['weather'].format(city=city)}\n"
            f"üå° {translations[user_lang]['temperature'].format(temp=temp_str)}\n"
            f"üå¨ {translations[user_lang]['feels_like'].format(feels_like=feels_like_str)}\n"
            f"üíß {translations[user_lang]['humidity'].format(humidity=humidity)}\n"
            f"üå™ {translations[user_lang]['wind_speed'].format(wind=wind)}\n"
            f"üå§ {translations[user_lang]['weather_condition'].format(weather=weather_desc)}"
        )
        bot.send_message(chat_id, response_message)
    else:
        bot.send_message(chat_id, translations[user_lang]["city_not_found"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å –≥–æ—Ä–æ–¥–∞–º–∏
@bot.message_handler(func=lambda message: message.text in ['–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞'])
def handle_city_buttons(message):
    get_weather(message)

bot.polling(non_stop=True)
